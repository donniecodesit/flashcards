{"version":3,"sources":["Layout/Other/Header.js","Layout/Other/NotFound.js","utils/api/index.js","Layout/Home/HomeCard.js","Layout/Home/HomePage.js","Layout/Study/StudyCard.js","Layout/Other/Breadcrumbs.js","Layout/Study/StudyPage.js","Layout/Deck/DeckForm.js","Layout/Deck/CreateDeck.js","Layout/Deck/InfoCard.js","Layout/Deck/DeckInfoPage.js","Layout/Deck/EditDeck.js","Layout/Cards/FormCard.js","Layout/Cards/AddCard.js","Layout/Cards/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","history","useHistory","className","style","backgroundColor","textAlign","onClick","goBack","goForward","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","HomeCard","handleDelete","fontSize","length","description","to","value","HomePage","useState","decks","setDecks","useEffect","abortSwitch","AbortController","abort","loadDecks","target","window","confirm","result","list","map","Object","keys","StudyCard","startingState","flipped","currentCard","studyState","setStudyState","back","front","push","Breadcrumbs","crumbs","crumb","content","classes","join","generateCrumb","StudyPage","setDeck","useParams","loadDeck","DeckForm","formData","handleChange","handleSubmit","onSubmit","htmlFor","required","type","placeholder","onChange","resize","rows","CreateDeck","setFormData","event","preventDefault","newDeck","InfoCard","useRouteMatch","width","DeckInfoPage","EditDeck","FormCard","AddCard","initialFormState","EditCard","apiDeck","apiCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ccc895c.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Header() {\n  const history = useHistory();\n  return (\n    <header className=\"jumbotron\" style={{ backgroundColor: \"#BCA1D4\"}}>\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\" style={{ textAlign: \"center\" }}>Flashcard-o-matic</h1>\n        <p className=\"lead\" style={{ textAlign: \"center\" }}>Discover The Flashcard Difference.</p>\n        <div className=\"d-flex justify-content-around row\">\n          <button className=\"btn btn-dark\" onClick={() => history.goBack(1)}>« Back</button>\n          <button className=\"btn btn-dark\" onClick={() => history.goForward(1)}>Forward »</button>\n        </div>\n      </div>\n\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Forms the layout for a card with View, Study, and Delete buttons.\r\nexport const HomeCard = ({ deck, handleDelete }) => (\r\n    <div className=\"card\">\r\n        <div className=\"container\">\r\n            <div className=\"row card-header\">\r\n                <div className=\"col-10\">\r\n                    <h4>{deck.name}</h4>\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <p style={{ fontSize: 14, textAlign: \"right\" }}>{deck.cards.length} cards</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"card-body\">\r\n            <div className=\"container\">\r\n                <p className=\"card-text\">{deck.description}</p>\r\n                <div className=\"row justify-content-between\">\r\n                    <div className=\"col-4\">\r\n                        <Link to={`decks/${deck.id}`} className=\"btn btn-secondary mr-2\">View</Link>\r\n                        <Link to={`decks/${deck.id}/study`} className=\"btn btn-primary\">Study</Link>\r\n                    </div>\r\n                    <div className=\"col-2 text-right\">\r\n                        <button className=\"btn btn-danger\" value={deck.id} onClick={handleDelete}>🗑</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default HomeCard;","import React, { useEffect, useState } from \"react\";\r\nimport { listDecks, deleteDeck } from \"../../utils/api\";\r\nimport HomeCard from \"./HomeCard\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function HomePage() {\r\n    //Initialize decks state\r\n    const [decks, setDecks] = useState([]);\r\n\r\n    //Fetch and load the decks when the page loads.\r\n    useEffect(() => {\r\n        const abortSwitch = new AbortController();\r\n        async function loadDecks() {\r\n            const response = await listDecks(abortSwitch.signal);\r\n            setDecks(response);\r\n            return () => abortSwitch.abort();\r\n        }\r\n        loadDecks();\r\n    }, [])\r\n\r\n    //Function to handle deletion of a deck\r\n    const handleDelete = async ({ target }) => {\r\n        const prompt = window.confirm(`Delete deck ${target.value}?`);\r\n        if (prompt) {\r\n            await deleteDeck(target.value);\r\n            const result = await listDecks();\r\n            setDecks(result);\r\n        }\r\n    };\r\n\r\n    //At this point, we have valid decks, map them out.\r\n    const list = decks.map((deck) => <HomeCard key={deck.id} deck={deck} handleDelete={handleDelete} />)\r\n\r\n    if (Object.keys(decks).length) {\r\n        return (\r\n            <div className=\"container\">\r\n                <Link to=\"/decks/new\" className=\"btn btn-secondary\">Create Deck</Link>\r\n                <hr />\r\n                <section>{list}</section>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"container\">\r\n                <p>Please add a deck.</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\n\r\nexport default function StudyCard({ cards, deckId }) {\r\n    //Set up a state to track what card is currently displaying and if the next button should be shown based on flipped\r\n    const startingState = {\r\n        flipped: false,\r\n        currentCard: 0\r\n    };\r\n    const [studyState, setStudyState] = useState(startingState);\r\n    const history = useHistory();\r\n\r\n    //Add functionality to the next button that changing the state\r\n    const nextButton = () => {\r\n        //If you're not on the last card, continue. Otherwise, offer restart.\r\n        if (studyState.currentCard < cards.length - 1) {\r\n            setStudyState({ ...studyState, currentCard: studyState.currentCard + 1, flipped: false });\r\n        } else {\r\n            window.confirm('Restart the deck? Click \"cancel\" to return home.')\r\n                ? setStudyState(startingState)\r\n                : history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    //If there are more than 2 cards, display them normally and cycle through them. Otherwise inform the user the deck is too short.\r\n    //Cards need to flip to view the back, then enable the next button to move to the next card. Use history to go home at the end prompt.\r\n    if (cards.length > 2) {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h3 className=\"card-title\">\r\n                        Card {studyState.currentCard + 1} of {cards.length}\r\n                    </h3>\r\n                    <p className=\"card-text\">\r\n                        {studyState.flipped ? cards[studyState.currentCard].back : cards[studyState.currentCard].front}\r\n                    </p>\r\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => setStudyState({ ...studyState, flipped: !studyState.flipped })}>Flip</button>\r\n\r\n                    {studyState.flipped && (\r\n                        <button className=\"btn btn-primary mr-2\" onClick={nextButton}>Next</button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <h2>Not enough cards</h2>\r\n                <p>You need at least 3 cards to study. There are {cards.length} cards in this deck.</p>\r\n                <Link to={`/decks/${deckId}/cards/new`}>\r\n                    <button className=\"btn btn-primary\">➕ Add Cards</button>\r\n                </Link>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Breadcrumbs({ crumbs }) {\r\n    function generateCrumb(crumb) {\r\n        let content = crumb.name;\r\n        const classes = [\"breadcrumb-item\"];\r\n        if (crumb.url) {\r\n            classes.push(\"breadcrumb-active\");\r\n            content = <Link to={crumb.url}>{crumb.name}</Link>\r\n        }\r\n        return (\r\n            <li key={`\"${crumb.name}\"`} className={classes.join(\" \")}>{content}</li>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ol className=\"breadcrumb\">\r\n            {crumbs.map(crumb => generateCrumb(crumb))}\r\n        </ol>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport StudyCard from \"./StudyCard\";\r\nimport Breadcrumbs from \"../Other/Breadcrumbs\";\r\n\r\n\r\nexport default function StudyPage() {\r\n    //Initialize the states for Deck, get deckId from params.\r\n    const [deck, setDeck] = useState([]);\r\n    const { deckId } = useParams();\r\n\r\n    //Read/Load the deck and set it\r\n    useEffect(() => {\r\n        const abortSwitch = new AbortController();\r\n        async function loadDeck() {\r\n            const response = await readDeck(deckId, abortSwitch.signal);\r\n            setDeck(response);\r\n            return () => abortSwitch.abort();\r\n        }\r\n        loadDeck();\r\n    }, [deckId]);\r\n\r\n\r\n    if (Object.keys(deck).length) {\r\n        return (\r\n            <div className=\"container\">\r\n                <nav aria-label=\"breadcrumb\">\r\n                    <Breadcrumbs crumbs={[\r\n                        { name: \"Home\", url: \"/\" },\r\n                        { name: deck.name, url: `/decks/${deckId}` },\r\n                        { name: \"Study\" }\r\n                    ]}\r\n                    />\r\n                </nav>\r\n                <h1>Study: {deck.name}</h1>\r\n                {/* STUDY CARD WITH CARDS HERE */}\r\n                <StudyCard cards={deck.cards} deckId={deckId} />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"container\">\r\n                <p>Loading...</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function DeckForm({ formData, handleChange, handleSubmit }) {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input required name=\"name\" type=\"text\" className=\"form-control\" value={formData.name} placeholder=\"Deck Name\" onChange={handleChange} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea required name=\"description\" style={{ resize: \"none\" }} rows=\"5\" className=\"form-control\" value={formData.description} placeholder=\"Brief description of the deck\" onChange={handleChange} />\r\n            </div>\r\n            <div>\r\n                <Link to=\"/\">\r\n                    <button className=\"btn btn-secondary mr-2\">Cancel</button>\r\n                </Link>\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../../utils/api\";\r\nimport DeckForm from \"./DeckForm\";\r\nimport Breadcrumbs from \"../Other/Breadcrumbs\";\r\n\r\nexport default function CreateDeck() {\r\n    //Set up initial form state for making a new card deck\r\n    const initialFormState = {\r\n        name: \"\",\r\n        description: \"\"\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState);\r\n    const history = useHistory();\r\n\r\n    //Functions to handle Form Change and Form Submission\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: [event.target.value] })\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const newDeck = await createDeck(formData);\r\n        history.push(`/decks/${newDeck.id}`);\r\n    }\r\n\r\n    //Return a breadcrumb navigation bar with a functional deck form\r\n    return (\r\n        <div className=\"container\">\r\n            <nav aria-label=\"breadcrumb\">\r\n                <Breadcrumbs crumbs={[\r\n                    { name: \"Home\", url: \"/\" },\r\n                    { name: \"Create Deck\" }\r\n                ]}\r\n                />\r\n            </nav>\r\n            <h1>Create Deck</h1>\r\n            {/* NEW DECK FORM*/}\r\n            <DeckForm formData={formData} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useRouteMatch, Link, useHistory } from \"react-router-dom\";\r\nimport { deleteCard } from \"../../utils/api\";\r\n\r\nexport default function InfoCard({ id, front, back }) {\r\n    //Use our URL for shortening code, function to add behavior to delete button.\r\n    const { url } = useRouteMatch();\r\n    const history = useHistory();\r\n    async function handleDelete() {\r\n        const prompt = window.confirm(\"Are you sure you want to delete this card? It will be removed.\")\r\n        if (prompt) {\r\n            await deleteCard(id);\r\n            history.push(\"/\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\" style={{ width: \"60%\" }}>\r\n                <div className=\"card-body\">\r\n                    <div className=\"d-flex justify-content-between row\">\r\n                        <p className=\"col-6 card-text\">{front}</p>\r\n                        <p className=\"col-6 card-text\">{back}</p>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Link to={`${url}/cards/${id}/edit`}>\r\n                            <button className=\"btn btn-secondary mr-2\">\r\n                                Edit\r\n                            </button>\r\n                        </Link>\r\n                        <button className=\"btn btn-danger\" onClick={handleDelete}>\r\n                            Delete\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { deleteDeck, readDeck } from \"../../utils/api\";\r\nimport InfoCard from \"./InfoCard\";\r\nimport Breadcrumbs from \"../Other/Breadcrumbs\";\r\n\r\nexport default function DeckInfoPage() {\r\n    //Initialize the state for Deck, get history and deckId from params.\r\n    const [deck, setDeck] = useState([]);\r\n    const history = useHistory();\r\n    const { deckId } = useParams();\r\n\r\n    //Read/Load the deck and set it\r\n    useEffect(() => {\r\n        const abortSwitch = new AbortController();\r\n        async function loadDeck() {\r\n            const response = await readDeck(deckId, abortSwitch.signal);\r\n            setDeck(response);\r\n            return () => abortSwitch.abort();\r\n        }\r\n        loadDeck();\r\n    }, [deckId]);\r\n\r\n    //Function to add behavior to delete buttons\r\n    async function handleDelete() {\r\n        const prompt = window.confirm(\"Are you sure you want to delete this deck? It will be removed.\")\r\n        if (prompt) {\r\n            await deleteDeck(deck.id);\r\n            history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    //If the deck has an ID value, return our component. Otherwise Loading.\r\n    if (deck.id) {\r\n        return (\r\n            <div className=\"container\">\r\n                <nav aria-label=\"breadcrumb\">\r\n                    <Breadcrumbs crumbs={[\r\n                        { name: \"Home\", url: \"/\" },\r\n                        { name: deck.name }\r\n                    ]}\r\n                    />\r\n                </nav>\r\n                <h3>{deck.name}</h3>\r\n                <p>{deck.description}</p>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div>\r\n                        <Link to={`/decks/${deck.id}/edit`}>\r\n                            <button className=\"btn btn-secondary mr-2\">\r\n                                Edit\r\n                            </button>\r\n                        </Link>\r\n                        <Link to={`/decks/${deck.id}/study`}>\r\n                            <button className=\"btn btn-primary mr-2\">\r\n                                <i className='bi bi-journal-bookmark-fill'></i> Study\r\n                            </button>\r\n                        </Link>\r\n                        <Link to={`/decks/${deck.id}/cards/new`}>\r\n                            <button className=\"btn btn-primary\">\r\n                                ➕ Add Cards\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                    <button className=\"btn btn-danger\" onClick={handleDelete}>\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n                <h2 className=\"my-2\">Cards</h2>\r\n                <div className=\"mb-3\">\r\n                    {deck.cards.map((card) => (\r\n                        <InfoCard key={card.id} id={card.id} front={card.front} back={card.back} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"container\">\r\n                <p>Loading...</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { updateDeck, readDeck } from \"../../utils/api\";\r\nimport DeckForm from \"./DeckForm\";\r\nimport Breadcrumbs from \"../Other/Breadcrumbs\";\r\n\r\nexport default function EditDeck() {\r\n    //Set up initial form state for editing a card deck\r\n    const initialFormState = {\r\n        name: \"\",\r\n        description: \"\"\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState);\r\n    const [deck, setDeck] = useState([])\r\n    const history = useHistory();\r\n    const { deckId } = useParams();\r\n\r\n    //load the deck based on ID\r\n    useEffect(() => {\r\n        const abortSwitch = new AbortController();\r\n        async function loadDeck() {\r\n            const response = await readDeck(deckId, abortSwitch.signal);\r\n            setDeck(response);\r\n            setFormData({ id: response.id, name: response.name, description: response.description });\r\n            return () => abortSwitch.abort();\r\n        }\r\n        loadDeck();\r\n    }, [deckId]);\r\n\r\n    //handle the change\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: [event.target.value] })\r\n    }\r\n\r\n    //handle the submission\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const updatedDeck = await updateDeck(formData);\r\n        history.push(`/decks/${updatedDeck.id}`);\r\n    }\r\n    //return the form\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <nav aria-label=\"breadcrumb\">\r\n                <Breadcrumbs crumbs={[\r\n                    { name: \"Home\", url: \"/\" },\r\n                    { name: deck.name, url: `/decks/${deckId}` },\r\n                    { name: \"Edit Deck\" }\r\n                ]}\r\n                />\r\n            </nav>\r\n            <h1>Edit Deck</h1>\r\n            {/* EDIT DECK FORM*/}\r\n            <DeckForm formData={formData} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function FormCard({ formData, deckId, handleChange, handleSubmit }) {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"front\">Front</label>\r\n                <textarea required name=\"front\" style={{ resize: \"none\" }} rows=\"3\" className=\"form-control\" value={formData.front} placeholder=\"Front of the card\" onChange={handleChange} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"back\">Back</label>\r\n                <textarea required name=\"back\" style={{ resize: \"none\" }} rows=\"3\" className=\"form-control\" value={formData.back} placeholder=\"Back of the card\" onChange={handleChange} />\r\n            </div>\r\n            <div>\r\n                <Link to={`/decks/${deckId}`} className=\"btn btn-secondary mr-2\">Cancel</Link>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { createCard, readDeck } from \"../../utils/api\";\r\nimport FormCard from \"./FormCard\";\r\nimport Breadcrumbs from \"../Other/Breadcrumbs\";\r\n\r\nexport default function AddCard() {\r\n    //Set up initial state, front back, formdata, deck, id from params\r\n    const initialFormState = {\r\n        front: \"\",\r\n        back: \"\"\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState);\r\n    const [deck, setDeck] = useState([]);\r\n    const history = useHistory();\r\n    const { deckId } = useParams();\r\n\r\n    //Handle change function\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: [event.target.value] })\r\n    }\r\n\r\n    //Handle submit (createCard)\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        await createCard(deckId, formData);\r\n        setFormData(initialFormState);\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    //Load deck\r\n    useEffect(() => {\r\n        const abortSwitch = new AbortController();\r\n        async function loadDeck() {\r\n            const response = await readDeck(deckId, abortSwitch.signal);\r\n            setDeck(response);\r\n            return () => abortSwitch.abort();\r\n        }\r\n        loadDeck();\r\n    }, [deckId]);\r\n\r\n    //return bredcrumb, name: add card, form for front and back, two buttons. done returns to deck, save submits\r\n    return (\r\n        <div className=\"container\">\r\n            <nav aria-label=\"breadcrumb\">\r\n                <Breadcrumbs crumbs={[\r\n                    { name: \"Home\", url: \"/\" },\r\n                    { name: deck.name, url: `/decks/${deckId}` },\r\n                    { name: \"Add Card\" }\r\n                ]}\r\n                />\r\n            </nav>\r\n            <h1>{deck.name}: Add Card</h1>\r\n            {/* NEW CARD FORM*/}\r\n            <FormCard formData={formData} deckId={deckId} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readCard, updateCard, readDeck } from \"../../utils/api\";\r\nimport Breadcrumbs from \"../Other/Breadcrumbs\";\r\nimport FormCard from \"./FormCard\";\r\n\r\nexport default function EditCard() {\r\n    //set up initial state, front back, formdata, deck, id from params\r\n    const [deck, setDeck] = useState([]);\r\n    const history = useHistory();\r\n    const { deckId, cardId } = useParams();\r\n    const initialFormState = {\r\n        id: 0,\r\n        front: \"\",\r\n        back: \"\",\r\n        deckId: deckId\r\n    }\r\n    const [formData, setFormData] = useState(initialFormState);\r\n\r\n    //Handle change function\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: [event.target.value] })\r\n    }\r\n\r\n    //Handle submit (updateCard)\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        await updateCard(formData);\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    //Load Deck, then Card\r\n    useEffect(() => {\r\n        const abortSwitch = new AbortController();\r\n        async function loadDeck() {\r\n            const apiDeck = await readDeck(deckId, abortSwitch.signal);\r\n            const apiCard = await readCard(cardId);\r\n            setDeck(apiDeck);\r\n            setFormData({ id: apiCard.id, front: apiCard.front, back: apiCard.back, deckId: apiDeck.id });\r\n            return () => abortSwitch.abort();\r\n        }\r\n        loadDeck();\r\n    }, [deckId, cardId]);\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <nav aria-label=\"breadcrumb\">\r\n                <Breadcrumbs crumbs={[\r\n                    { name: \"Home\", url: \"/\" },\r\n                    { name: deck.name, url: `/decks/${deckId}` },\r\n                    { name: `Edit Card: ${cardId}` }\r\n                ]}\r\n                />\r\n            </nav>\r\n            <h1>{deck.name}: Edit Card {cardId}</h1>\r\n            {/* NEW CARD FORM*/}\r\n            <FormCard formData={formData} deckId={deckId} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport Header from \"./Other/Header\";\nimport NotFound from \"./Other/NotFound\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./Home/HomePage\";\nimport StudyPage from \"./Study/StudyPage\";\nimport CreateDeck from \"./Deck/CreateDeck\";\nimport DeckInfoPage from \"./Deck/DeckInfoPage\";\nimport EditDeck from \"./Deck/EditDeck\";\nimport AddCard from \"./Cards/AddCard\";\nimport EditCard from \"./Cards/EditCard\";\n\nexport default function Layout() {\n  //React Router to handle page management\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <StudyPage />\n          </Route>\n          <Route path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck />\n          </Route>\n          <Route exact path=\"/decks/:deckId\">\n            <DeckInfoPage />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}